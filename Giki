local AureKillModule = {}

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

local auraEnabled = false
local auraRadius = 45
local damageAmount = 50

-- Check if the model is a player's character
local function isPlayerModel(model)
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Character == model then
			return true
		end
	end
	return false
end

-- Monitor Animator removal and log the event
local function monitorAnimatorRemoval(humanoid)
	if humanoid then
		humanoid.ChildRemoved:Connect(function(child)
			if child:IsA("Animator") then
				print("⚠️ Animator removed from Humanoid of", humanoid.Parent.Name, "- removed by NPC internal script due to health change.")
			end
		end)
	end
end

-- Collect all supported NPC models from known folders in workspace
local function collectNPCModels()
	local npcModels = {}

	-- NightEnemies
	local nightFolder = Workspace:FindFirstChild("NightEnemies")
	if nightFolder then
		for _, model in ipairs(nightFolder:GetChildren()) do
			table.insert(npcModels, model)
		end
	end

	-- Animals under Baseplates > Baseplate > CenterBaseplate > Animals
	local baseplates = Workspace:FindFirstChild("Baseplates")
	if baseplates then
		local baseplate = baseplates:FindFirstChild("Baseplate")
		if baseplate then
			local center = baseplate:FindFirstChild("CenterBaseplate")
			if center then
				local animals = center:FindFirstChild("Animals")
				if animals then
					for _, model in ipairs(animals:GetChildren()) do
						table.insert(npcModels, model)
					end
				end
			end
		end
	end

	-- Zombies inside RandomBuildings > any building > Zombies folder
	local buildings = Workspace:FindFirstChild("RandomBuildings")
	if buildings then
		for _, building in ipairs(buildings:GetChildren()) do
			for _, descendant in ipairs(building:GetDescendants()) do
				if descendant:IsA("Folder") and descendant.Name == "Zombies" then
					for _, model in ipairs(descendant:GetChildren()) do
						table.insert(npcModels, model)
					end
				end
			end
		end
	end

	-- Zombies inside Towns > any town > Zombies folder
	local towns = Workspace:FindFirstChild("Towns")
	if towns then
		for _, town in ipairs(towns:GetChildren()) do
			for _, descendant in ipairs(town:GetDescendants()) do
				if descendant:IsA("Folder") and descendant.Name == "Zombies" then
					for _, model in ipairs(descendant:GetChildren()) do
						table.insert(npcModels, model)
					end
				end
			end
		end
	end

	return npcModels
end

-- Aura kill loop - damage NPCs around player within auraRadius
local function startAura()
	auraEnabled = true
	task.spawn(function()
		while auraEnabled do
			local character = LocalPlayer.Character
			if character and character:FindFirstChild("HumanoidRootPart") then
				local root = character.HumanoidRootPart
				local npcModels = collectNPCModels()

				for _, model in ipairs(npcModels) do
					local humanoid = model:FindFirstChildOfClass("Humanoid")
					local rootPart = model:FindFirstChild("HumanoidRootPart")
					if model:IsA("Model") and humanoid and rootPart and not isPlayerModel(model) then
						local dist = (rootPart.Position - root.Position).Magnitude
						if dist <= auraRadius and humanoid.Health > 0 then
							-- Monitor Animator removal
							monitorAnimatorRemoval(humanoid)

							-- Check if Animator exists before taking damage
							if not humanoid:FindFirstChildOfClass("Animator") then
								print("⚠️ Animator is missing for", model.Name, "- cannot apply damage.")
							else
								humanoid:TakeDamage(damageAmount)
								print("💥 Damaged:", model.Name, "->", humanoid.Health)
							end
						end
					end
				end
			end
			task.wait(0.5)
		end
	end)
end

-- Stop aura
local function stopAura()
	auraEnabled = false
end

-- Toggle externally
function AureKillModule.toggleAura(state)
	if state then
		startAura()
	else
		stopAura()
	end
end

return AureKillModule
