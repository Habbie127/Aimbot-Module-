local AimbotModule = {}

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

local visibilityEnabled = true
local isAimbotEnabled = false
local aimbotConnection = nil
local maxAimbotDistance = 500
local fovRadius = 60
local useFOV = false
local showFOVCircle = true
local aimNearest = false

local fovCircleGui = nil

local IgnoreNames = {
    "Horse",
    "Unicorn",
    "Model_TurretSoldier",
    "Model_RifleSoldier",
}

local function isPlayerModel(model)
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character == model then
            return true
        end
    end
    return false
end

local function shouldIgnore(model)
    return isPlayerModel(model) or table.find(IgnoreNames, model.Name)
end

local function isVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * 1000

    local rayParams = RaycastParams.new()  
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}  
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist  

    local result = Workspace:Raycast(origin, direction, rayParams)  
    return result and result.Instance and targetPart:IsDescendantOf(result.Instance.Parent)
end

function AimbotModule.setupFOVGui()
    if fovCircleGui then fovCircleGui:Destroy() end

    local FOVGui = Instance.new("ScreenGui")  
    FOVGui.Name = "FOVCircleGui"  
    FOVGui.ResetOnSpawn = false  
    FOVGui.Parent = game.CoreGui  

    local FOVCircle = Instance.new("Frame")  
    FOVCircle.Name = "FOVCircle"  
    FOVCircle.AnchorPoint = Vector2.new(0.5, 0.5)  
    FOVCircle.Position = UDim2.fromScale(0.5, 0.4)  
    FOVCircle.BackgroundTransparency = 1  
    FOVCircle.BorderSizePixel = 0  
    FOVCircle.Size = UDim2.fromOffset(fovRadius * 2, fovRadius * 2)  
    FOVCircle.ZIndex = 10  
    FOVCircle.Visible = showFOVCircle  
    FOVCircle.Parent = FOVGui  

    local UICorner = Instance.new("UICorner", FOVCircle)  
    UICorner.CornerRadius = UDim.new(1, 0)  

    local FOVOutline = Instance.new("UIStroke", FOVCircle)  
    FOVOutline.Thickness = 1  
    FOVOutline.Color = Color3.fromRGB(0, 255, 0)  
    FOVOutline.Transparency = 0  

    fovCircleGui = FOVGui
end

function AimbotModule.getClosestEnemy()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return nil end

    local myPos = character.HumanoidRootPart.Position  
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)  

    local closest, shortestDist = nil, math.huge  

    for _, npc in pairs(Workspace:GetDescendants()) do  
        if npc:IsA("Model") and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("HumanoidRootPart") and not shouldIgnore(npc) then  
            local humanoid = npc.Humanoid  
            if humanoid.Health <= 0 or humanoid:GetState() == Enum.HumanoidStateType.Dead then  
                continue  
            end  

            local hrp = npc.HumanoidRootPart  
            local dist = (hrp.Position - myPos).Magnitude  
            if dist <= maxAimbotDistance then  
                -- FOV check if using FOV
                if useFOV then  
                    local screenPoint, onScreen = Camera:WorldToViewportPoint(hrp.Position)  
                    if onScreen then  
                        local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - screenCenter).Magnitude  
                        if distanceFromCenter > fovRadius then  
                            continue  
                        end  
                    else  
                        continue  
                    end  
                end  

                -- Visibility check  
                if visibilityEnabled and not isVisible(hrp) then  
                    continue  
                end  

                if dist < shortestDist then  
                    closest = npc  
                    shortestDist = dist  
                end  
            end  
        end  
    end  

    return closest
end

function AimbotModule.aimAtEnemy()
    local target = AimbotModule.getClosestEnemy()
    if target and target:FindFirstChild("HumanoidRootPart") then
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.HumanoidRootPart.Position)
    end
end

function AimbotModule.setAimbotState(state)
    isAimbotEnabled = state

    if aimbotConnection then  
        aimbotConnection:Disconnect()  
        aimbotConnection = nil  
    end  

    if state then  
        AimbotModule.setupFOVGui()  
        aimbotConnection = RunService.RenderStepped:Connect(function()  
            if aimNearest then
                AimbotModule.aimAtEnemy()  
            end
        end)  
    elseif fovCircleGui then  
        fovCircleGui:Destroy()  
        fovCircleGui = nil  
    end
end

function AimbotModule.setVisibilityCheck(state)
    visibilityEnabled = state
end

function AimbotModule.setDistanceLimit(dist)
    maxAimbotDistance = dist
end

function AimbotModule.setFOVEnabled(state)
    useFOV = state
end

function AimbotModule.setFOVVisible(state)
    showFOVCircle = state
    if fovCircleGui and fovCircleGui:FindFirstChild("FOVCircle") then
        fovCircleGui.FOVCircle.Visible = state
    end
end

function AimbotModule.setAimNearest(state)
    aimNearest = state
end

return AimbotModule
